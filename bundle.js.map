{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/calculator.js","webpack:///./src/data/data.js","webpack:///./src/data/equations.js","webpack:///./src/nuclear.js","webpack:///./src/sidepanel.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAkC;;AAElC;;AAEA;AACA,oCAAoC;AACpC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gCAAgC,uDAAE;AAClC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;;AAEA,qCAAqC;AACrC,qCAAqC;AACrC,qCAAqC;AACrC,qCAAqC;AACrC,qCAAqC;AACrC,qCAAqC;AACrC,qCAAqC;AACrC,qCAAqC,2BAA2B;AAChE,qCAAqC,2B;;AAErC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA,kDAAkD;AAClD;AACA;;AAEA;AACA;AACA;AACA,0C;AACA;;AAEA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,+DAA+D;AAC/D,iEAAiE;AACjE;AACA;AACA,sDAAsD;AACtD,gEAAgE;AAChE,iEAAiE;AACjE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gG;AACA;AACA,gG;AACA;AACA,gG;AACA;AACA,iG;AACA;AACA,oG;AACA;AACA;;AAEA;AACA;AACA;AACA,gFAAgF;AAChF;AACA,0FAA0F;AAC1F;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,K;;;;AAIA;;AAEe,yEAAU,EAAC;;AAE1B;AACA;AACA;AACA,4BAA4B;AAC5B,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,Q;;;;;;;;;;;;;;;ACpTA;;AAEO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG;AACnG;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mHAAmH;AACnH;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;;AAEA;AACA,iB;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;;;;;;;;;;;;;;;ACxLR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,cAAc;AACzD;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;;AAEA,0DAA0D,cAAc;AACxE;AACA;AACA;AACA;AACA;;AAEA,6DAA6D,uBAAuB;AACpF;AACA;AACA;AACA;AACA;;AAEA,+CAA+C,uBAAuB;AACtE;AACA;AACA;AACA;AACA;;AAEA,iEAAiE,uBAAuB;AACxF;AACA;AACA;AACA;AACA;;AAEA,iEAAiE,uBAAuB;AACxF;AACA;AACA;AACA;AACA;;AAEA,wDAAwD,uBAAuB;AAC/E;AACA;AACA;AACA;AACA;;AAEA,+CAA+C,uBAAuB;AACtE;AACA;AACA;AACA;;AAEA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;;AAEA,2DAA2D,uBAAuB;AAClF;AACA;AACA;AACA;;AAEA,2DAA2D,uBAAuB;AAClF;AACA;AACA;AACA;;AAEA;;AAEA,4DAA4D,+BAA+B;AAC3F;AACA;AACA;AACA;;AAEA,8DAA8D,uBAAuB;AACrF;AACA;AACA;AACA;;AAEA;;AAEA,sFAAsF;AACtF;AACA;AACA;AACA;;AAEA,8DAA8D,0BAA0B;AACxF;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,+DAA+D;AAC/D;AACA;AACA;AACA;;AAEe,iEAAE,EAAC;;;;;;;;;;;;;;;;ACzOlB;AAAA;AAAoC;;AAEpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,a;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,SAAS;AAC3D,mDAAmD,UAAU;AAC7D;;AAEA;AACA;AACA;;AAEA,uCAAuC;AACvC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;AAKjB;AACA;AACA;AACA,8BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA,sCAAsC,kDAAS;AAC/C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,KAAK;;;;;;AAML;AACA;AACA;AACA;AACA;AACA;;;;;AAKA,CAAC;;AAED;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,YAAY,uDAAuD;AACnE;;;;;;;;;;;;;;;AC/KA;AAAA;AAAA;;AACsC;;;AAGtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,gC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,mDAAQ;;AAEnC;AACA,mCAAmC,6BAA6B;AAChE;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mDAAQ;;AAE1C;AACA;AACA,+BAA+B,mDAAQ;AACvC;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,mDAAU;AACzC;;AAEA;AACA;AACA;;AAEA;AACA;AACA,S;;AAEA;AACA;;AAEA;;AAEe,wEAAS,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/nuclear.js\");\n","import eq from './data/equations';\n\nclass Calculator {\n\n    constructor(){\n        this.ambientPressure = 14.7; //normal pressure equal to 1 atm. Units are psi\n        this._nLog = this._nLog.bind(this);\n    }\n\n    //These will be helper functions for calculating the equations\n\n    _mi2km(distMi){\n        return distMi* 1.60934;\n    }\n\n    _mi2m(distMi){\n        return distMi * 1.60934 * 1000;\n    }\n\n    //this function retrieves the right equation based on the id of the equation in the hash, and takes in a log base \n    //based on the one given in the source text, and outputs the appropriate result\n\n    _eqOutput(id, x, logbase) {\n        return this._polyLog(x, eq[id].args, logbase);\n    }\n\n    //logarithm function to a specified base \n    //we use conditionals for 2 and 10 instead of only putting the last conditional statement\n    //because the built-in base 10 and base 2 functions take care of floating point inconsistencies that the \n    //log base converter would show. Not significant, but why not?\n\n    _nLog(base, n) {\n        if (base === Math.E) {\n            //return natural logarithm if base is euler's constant\n            return Math.log(n);\n        } else if (base === 10) {\n            //return logarithm with a base 10\n            return Math.log10(n);\n        } else if (base === 2) {\n            //return logarithm with a base of 2\n            return Math.log2(n);\n        } else {\n            //return logarithm for any other log base\n            return (Math.log(n)) / (Math.log(base));\n        }\n    }\n\n    //runs the polynomial\n    _polyLog(x, args, logbase=10) {\n        const logN = this._nLog(logbase, x);\n\n        const y = this._polynomial(logN, args);\n\n        return logbase**y;\n    }\n\n    //polynomial builder \n    _polynomial(x, args){\n        var y = 0;\n        for (let i = 0; i < args.length; i++) {\n            y += args[i] * (x**i);\n        }\n        return y;\n    }\n\n    //scales from one bombYield effect to another  according to the cube root law\n    //takes in a distance and bombyield to reference \n    _scalebombYield(bombYield, distScale, bombYieldScale) {\n        return distScale * (bombYieldScale/ bombYield)**(-1 / 3);\n    }\n\n    //initial nuclear radiation (rem)\n    //input is distance (slant range), bombYield, airburst (bool); output is rem\n    //We note that the initial radiation dose (gamma + neutron radiation emitted by uranium/plutonium after fission)\n    //is greater for a surface impact than an higher altitude detonation\n    //for very small yields (< 10 kt) the scaling ratio of the yield reaches unity\n    getOnsetNuclearRadiation(distance, bombYield, airburst) {\n            let scalingRatio;\n            let surface;\n            let densityRatio;\n\n            if (bombYield < 10) {\n                scalingRatio = 1;\n            } else {\n                scalingRatio = this._eqOutput('2-115', bombYield);\n            }\n\n            if (airburst === true) { //scales for surface vs. airbursts\n                surface = 1;\n                densityRatio = 0.9;\n            } else {\n                surface = 2 / 3;\n                densityRatio = 1;\n            }\n\n            //eq. 2-116\n            const r = (bombYield / distance**2) * (4997.41 * Math.exp(-9.263158 * (densityRatio) * distance) + (surface * 1033) * (scalingRatio) * Math.exp(-5.415384 * (densityRatio) * distance));\n            return r;\n    }\n\n    //initial nuclear radiation (distance)\n\t//input is yield and rem; output is slant range\n    getOnsetNuclearRadiationRadius(bombYield, radRem){\n\n                const a = +0.1237561; const aPrime = +0.0143624;\n                const b = +0.0994027; const bPrime = -0.0000816;\n                const c = +0.0011878; const cPrime = -0.0000014;\n                const d = -0.0002481; const dPrime = +0.0054734;\n                const e = +0.0000096; const ePrime = -0.0003272;\n                const f = -0.1308215; const fPrime = +0.0000106;\n                const g = +0.0009881; const gPrime = -0.0001220;\n                const h = -0.0032363; const hPrime = +0.0000217; //note! h is positive in the original, but this gives nonsense answers\n                const i = +0.0000111; const iPrime = -0.0000006; \n\n                const logI = this._nLog(10,radRem);\n                const logI2 = logI**2;\n                const logI3 = logI**3;\n                const logW = this._nLog(10, bombYield);\n\n                //eq. 2.116\t\n                let distance = a + (b + aPrime * logI + dPrime * logI2 + gPrime * logI3) * logW;\n                distance += (c + bPrime * logI + ePrime * logI2 + hPrime * logI3) * (logW**3);\n                distance += (d + (cPrime * logI) + (fPrime * logI2) + (iPrime * logI3)) * (logW**5);\n                distance += (e * (logW**7)) + (f * logI) + (g * logI2) + (h * logI3);\n                distance += (i * (logI**5));\n\n                return 10**distance;\n\n    }\n\n\n    getAirBurstRadius(bombYield, airburst){\n\n    }\n\n    //maximum fireball radius, input yield and whether airburst, output miles\n    getFireballRadius(bombYield, airburst){\n        switch (airburst) {\n            case (false): \n                return 0.04924 * (bombYield**0.4);  //surface\n            case (true): \n                return 0.03788 * (bombYield**0.4);  //airburst\n        }\n    }\n\n    //For airbursts only, this is the minimum height from the ground the detonation needs to occur for the \n    //radioactive fallout to be considered negligible\n    getMinHeightNegligibleFallout(bombYield){\n        return 0.03409 * (bombYield**0.4); \n    }\n\n    getCraterParams(bombYield, terrain){\n        const crater = {};\n        switch(terrain) {\n          case('soil'):\n            crater.lip = 0.02398 * (bombYield**1 / 3); //lip\n            crater.apparentDiam = 0.01199 * (bombYield**1 / 3); //apparent\n            crater.apparentDepth = 0.005739 * (bombYield**1 / 3); //depth\n            return crater;\n          case('rock'): \n            crater.lip = 0.01918 * (bombYield**1 / 3); //lip\n            crater.apparentDiam = 0.009591 * (bombYield**1 / 3); //apparent\n            crater.apparentDepth = 0.004591 * (bombYield**1 / 3); //depth \n            return crater;\n        }\n    }\n\n    // input is yield and one of the following strings:\n    //    _1st-50: 50% chance of 1st degree burn\n    //    _2nd-50: 50% chance of 2nd degree burn\n    //    _3rd-50: 50% chance of 3rd degree burn\n    //    _3rd-100: 100% chance of 3rd degree burn\n    //    noharm-100: 100% chance of no thermal damage (min radius)\n    //    output is in q (cal/cm^2), based on Glasstone and Dolan 1977\n    getThermalRadiation(bombYield, paramType){\n        switch (paramType) {\n            case ('_1st-50'): \n                return this._nLog(Math.E, this._eqOutput('77-12.65-1st-50', bombYield, Math.E)); \n            case ('_2nd-50'): \n                return this._nLog(Math.E, this._eqOutput('77-12.65-2nd-50', bombYield, Math.E)); \n            case ('_3rd-50'): \n                return this._nLog(Math.E, this._eqOutput('77-12.65-3rd-50', bombYield, Math.E)); \n            case ('_3rd-100'): \n                return this._nLog(Math.E, this._eqOutput('77-12.65-3rd-100', bombYield, Math.E)); \n            case ('_noharm-100'): \n                return this._nLog(Math.E, this._eqOutput('77-12.65-noharm-100', bombYield, Math.E)); \n        }\n    }\n\n    getThermalRadiationDistance(radiation, bombYield, airburst){\n            switch (airburst) {\n                case (true): \n                    return this._eqOutput('2-108', radiation * (bombYield**-1));  //airburst\n                case (false): \n                    return this._eqOutput('2-108', radiation * ( (0.7 * bombYield)**-1) ); //surface\n            }\n    }\n\n    getThermalRadiationRadius(bombYield, thermalType, airburst){\n        let distScale;\n        let d;\n\n            if (bombYield < 1) {\n                //low yield scaling\t\t\t\t\t\n                distScale = this.getThermalRadiationDistance(this.getThermalRadiation(1, thermalType), 1, airburst);\n                d = this._scalebombYield(bombYield, distScale, 1);\n            } else if (bombYield > 20000) {\n                //high yield scaling\t\t\t\t\t\n                distScale = this.getThermalRadiationDistance(this.getThermalRadiation(bombYield, thermalType), 20000, airburst);\n                d = this._scalebombYield(bombYield, distScale, 20000);\n            } else {\n                //default range\n                d = this.getThermalRadiationDistance(this.getThermalRadiation(bombYield, thermalType), bombYield, airburst);\n            }\n\n        return d;\n    }\n\n    //gives you the height of burst in order to maximum the range of a given overpressure at a given yield\n\t//input is yield and overpressure, output is feet\n\tgetOptimumHeightOverpressure(bombYield, maxOverpressure) {\n        return this._eqOutput('2-78', maxOverpressure) / (1 / bombYield**(1 / 3) );\n    }\n\n    //calculates the burst altitude from distance and a yield, output is feet\n    //maximizes overpressure at a given distance\n    getOptimumBurstHeight(distance, bombYield) {\n        return this._eqOutput('2-79', distance * ( 1 / bombYield**(1 / 3) )) / ( (1 / bombYield)**(1 / 3) );\n    }\n\n\n    //input is psi, output is scaled range\n    getMaxOverpressureRange(x, airburst) {\n        switch (airburst) {\n            case (false): \n                return this._eqOutput('2-5', x);\n            case (true): \n                return this._eqOutput('2-61', x);\n        }\n    }\n\n    //input is scaled range, output in psi\n    getMaxOverpressurePsi(x, airburst) {\n        switch (airburst) {\n            case (false): \n                return this._eqOutput('2-4', x);\n            case (true): \n                return this._eqOutput('2-60', x);\n        }\n    }\n\n    //input is scaled range, output in psi\n    getMaxDynamicPressurePsi(x, airburst) {\n        switch (airburst) {\n            case (false):\n                 return this._eqOutput('2-6', x);\n            case (true): \n                if (x < 0.154) {\n                    return this._eqOutput('2-64', x);\n                } else {\n                    return this._eqOutput('2-62', x);\n                }\n        }\n    }\n\n\n    //input in scaled range, output in mph\n    getMaxWindVelocityMph(x, airburst) {\n        switch (airburst) {\n            case (false): \n                return this._eqOutput('2-16', x);\n            case (true): \n                if (x > 0.2568) {\n                    return this._eqOutput('2-74', x);\n                } else {\n                    return this._eqOutput('2-76', x);\n                }\n        }\n    }\t\n\n    \n   \n}\n\nexport default Calculator;\n\n   // //simple linear interpolation -- returns x3 for a given y3\n    // _lerp(x1, y1, x2, y2, y3) {\n    //     if (y2 == y1) {\n    //         return false; //division by zero avoidance\n    //     } else {\n    //         return ((y2 - y3) * x1 + (y3 - y1) * x2) / (y2 - y1);\n    //     }\n    // }\n\n    // //turns distance (miles) and yield into scaled range\n    // this.scaled_range = function (distance, bombYield) {\n    //     return distance * Math.pow(1 / bombYield, 1 / 3) * Math.pow(this.ambient_pressure / 14.7, 1 / 3);\n    // }\n\n    // //gets distance from scaled range if bombYield is known\n    // //returns in miles\n    // this.distance_from_scaled_range = function (scaled_range, bombYield) {\n    //     return scaled_range / Math.pow(1 / bombYield, 1 / 3) * Math.pow(this.ambient_pressure / 14.7, 1 / 3);\n    // }\n\n    // //gets bombYield from scaled range if distance is known\n    // this.bombYield_from_scaled_range = function (scaled_range, distance) {\n    //     return 1 / Math.pow(scaled_range / distance / Math.pow(this.ambient_pressure / 14.7, 1 / 3), 3);\n    // }","\n//Store nuclear bomb / warhead data to be displayed in selector, in addition to a custom yield input\n\nexport const bombData = {\n\n    //usa first\n\n    'Davy Crockett': {\n        yield: '0.02 kt [TNT]',\n        origin: 'U.S.A',\n        date: '7-July-1962' ,\n        dropLocation: 'Nevada Test Site, Nevada' ,\n        description: \"The M-28 or M-29 Davy Crockett Weapon System was the tactical nuclear recoilless gun\\\n        for firing the M-388 nuclear projectile that was deployed by the United States during the Cold War.\\\n        It was one of the smallest nuclear weapon systems ever built, and was developed for use against Soviet\\\n        and North Korean armor and troops in case war broke out in Europe or the Korean peninsula. The M-388 round\\\n        used a version of the Mk-54 warhead, a very small sub-kiloton fission device. Tested under the code-name\\\n        Little-Feller nuclear test.\"\n\n    },\n    \n    'Little Boy': {\n        yield: '15 kt [TNT]',\n        origin: 'U.S.A',\n        date: '6-August-1945' ,\n        dropLocation: 'Hiroshima, Japan',\n        description: \"First atomic bomb dropped on the Japanese city of Hiroshima during World War II.\\\n        It was the first nuclear weapon used in warfare. The Hiroshima bombing was the second man-made\\\n        nuclear explosion in history, after the Trinity test, and the first uranium-based detonation.\\\n        Its components were fabricated at three different plants so that no one would have a copy of the\\\n        complete design. After the war ended, it was not expected that the inefficient Little Boy design\\\n        would ever again be required, and many plans and diagrams were destroyed.\"\n    },\n    'Fat Man': {\n        yield: '15 kt [TNT]',\n        origin: 'U.S.A',\n        date: '9-August-1945',\n        dropLocation: 'Nagasaki, Japan',\n        description: \"Implosion type plutonium-239 fission bomb (the second of the two nuclear weapons used in warfare).\\\n        The name Fat Man refers to the early design of the bomb because it had a wide, round shape; it was also known as\\\n        the Mark III. The first of that type to be detonated was the Gadget in the Trinity nuclear test less than a month earlier.\\\n        The Fat Man was retired in 1950.\"\n    },\n    // 'W-76': {\n    //     yield: ,\n    //     origin: 'U.S.A',\n    //     date:   ,\n    //     dropLocation: ,\n    //     description:\n\n    // },\n    // 'W-80': {\n    //     yield: ,\n    //     origin: 'U.S.A',\n    //     date:   ,\n    //     dropLocation: ,\n    //     description:\n\n    // },\n    // 'W-87': {\n    //     yield: ,\n    //     origin: 'U.S.A',\n    //     date:   ,\n    //     dropLocation: ,\n    //     description:\n\n    // },\n    // 'B-61 Mod 7': {\n    //     yield: ,\n    //     origin: 'U.S.A',\n    //     date:   ,\n    //     dropLocation: ,\n    //     description:\n\n    // },\n    // 'W-87': {\n    //     yield: ,\n    //     origin: 'U.S.A',\n    //     date:   ,\n    //     dropLocation: ,\n    //     description:\n\n    // },\n    // 'W-88': {\n    //     yield: ,\n    //     origin: 'U.S.A',\n    //     date:   ,\n    //     dropLocation: ,\n    //     description:\n\n    // },\n    // 'Ivy-King': {\n    //     yield: ,\n    //     origin: 'U.S.A',\n    //     date:   ,\n    //     dropLocation: ,\n    //     description:\n\n    // },\n    // 'W-59': {\n    //     yield: ,\n    //     origin: 'U.S.A',\n    //     date:   ,\n    //     dropLocation: ,\n    //     description:\n\n    // },\n    // 'B-83': {\n    //     yield: ,\n    //     origin: 'U.S.A',\n    //     date:   ,\n    //     dropLocation: ,\n    //     description:\n\n    // },\n    // 'W-39': {\n    //     yield: ,\n    //     origin: 'U.S.A',\n    //     date:   ,\n    //     dropLocation: ,\n    //     description:\n\n    // },\n    // 'W-53': {\n    //     yield: ,\n    //     origin: 'U.S.A'Ivy-Mike\n    //     date:   ,\n    //     dropLocation: ,Ivy-Mike\n    //     description:\n\n    // },\n    'Ivy-Mike': {\n        yield: '104000.0 kt [TNT]' ,\n        origin: 'U.S.A',\n        date: '1-November-1952'  ,\n        dropLocation: 'Enewetak Atoll, Marshall Islands',\n        description: \" Designed by Richard Garwin, a student of Enrico Fermi, Ivy Mike\\\n        was the first test of a thermonuclear device, in which part of the explosive yield\\\n        comes from nuclear fusion, also known as a hydrogen bomb. It was detonated as part of Operation Ivy.\\\n        It was the first full test of the Teller–Ulam design, a staged fusion device.Due to its physical size\\\n        and fusion fuel type(cryogenic liquid deuterium), the Mike device was not suitable for use as a deliverable weapon.\\\n        In fact, the 82-ton device was essentially a building that resembled a factory rather than a weapon.\\\n        At its center, a very large cylindrical thermos flask or cryostat held the cryogenic deuterium fusion fuel.\\\n        A regular fission bomb at one end was used to create the conditions needed to initiate the fusion reaction.\"\n    },\n    'Castle-Bravo': {\n        yield: '15000.0 kt [TNT]',\n        origin: 'U.S.A',\n        date:  '1-March-1954' ,\n        dropLocation: 'Bikini Atoll, Marshall Islands' ,\n        description: \n        \"The first test of a deployable (solid fuel) thermonuclear weapon.\\\n        Also (accidentally) the largest weapon ever tested by \\\n        the United States (15 megatons). It was also the single largest U.S. radiological\\\n        accident in connection with nuclear testing. \\\n        The unanticipated yield,\\\n        and a change in the weather, resulted in nuclear fallout spreading eastward onto\\\n        the inhabited Rongelap and Rongerik atolls, which were soon evacuated.\\\n        Many of the Marshall Islands natives have since suffered from birth defects and have received\\\n        some compensation from the federal government of the United States. A Japanese fishing boat,\\\n        the Daigo Fukuryū Maru, also came into contact with the fallout, which caused many of the crew to grow ill;\\\n        one eventually died.\"\n\n    },\n    'Gadget': {\n        yield: '22.1 kt [TNT]',\n        origin: 'U.S.A',\n        date: '16-July-1945',\n        dropLocation: 'Soccoro, New Mexico',\n        description: \"The first detonation of a nuclear weapon in the Trinity test, as part of the Manhattan Project.\\\n        Bomb was an implosion-design plutonium device, of the same design as the Fat Man bomb later detonated over Nagasaki.\\\n        The complexity of the design required a major effort from the Los Alamos Laboratory, and concerns about whether it would\\\n        work led to a decision to conduct the first nuclear test.\"\n\n    },\n};\n\n//More bomb data to implement possibly later when I have time.\n// 'B61 Mod 3': {                       \n//         yield: ,\n//         origin: 'U.S.A' ,\n//         date:  ,\n//         dropLocation: ,\n//         description: \"\"\n\n//     },\n","\n//Sources for the blast characteristics equations come from:\n//      E.Royce Fletcher, Ray W.Albright, Robert F.D.Perret,\n//      Mary E.Franklin, I.Gerald Bowen, and Clayton S.White,\n//      \"NUCLEAR BOMB EFFECTS COMPUTER (Including Slide-rule Design\n//      and Curve Fits for Weapons Effects), \" (CEX-62.2) U.S. Atomic Energy Commission\n//      Civil Effects Test Operations, February 1963.\n//\n//      Samuel Glasstone and Philip J. Dolan, THE EFFECTS OF NUCLEAR WEAPONS, 1977 edn.\n\n//The organization and derivation of the equations can be attributed to Alex Wellerstein from NuclearSecrecy\n//and credit should go to him for the data organization of this part\n\n//this will hold all the constants and range data of parameters in our blast characteristics\n// used in performing our calculations\n\nconst eq = {};\n\neq['2-4'] = [];\neq['2-4'].xmin = 0.0472;\neq['2-4'].xmax = 4.82;\neq['2-4'].args = [-0.1877932, -1.3986162, 0.3255743, -0.0267036];\neq['2-4'].desc = \"Max overpressure (surface): psi from scaled range\";\n\n//Eq. 2.5 - maximum overpressure at 0 feet; input is psi; output in scaled range\neq['2-5'] = [];\neq['2-5'].xmin = 0.1;\neq['2-5'].xmax = 200;\neq['2-5'].args = [-0.1307982, -0.6836211, 0.1091296, -0.0167348];\neq['2-5'].desc = \"Max overpressure (surface): scaled range from psi\";\n\n//Eq. 2.19 - maximum overpressure at 100 feet; input is psi; output in scaled range\neq['2-19'] = [];\neq['2-19'].xmin = 1;\neq['2-19'].xmax = 200;\neq['2-19'].args = [-0.0985896, -0.6788230, 0.0846268, -0.0089153];\neq['2-19'].desc = \"Max overpressure (100 ft): scaled range from psi\";\n\n//Eq. 2.25 - maximum overpressure at 200 feet; input is psi; output in scaled range\neq['2-25'] = [];\neq['2-25'].xmin = 1;\neq['2-25'].xmax = 200;\neq['2-25'].args = [-0.0564384, -0.7063068, 0.0838300, -0.0057337];\neq['2-25'].desc = \"Max overpressure (200 ft): scaled range from psi\";\n\n//Eq. 2.31 - maximum overpressure at 300 feet; input is psi; output in scaled range\neq['2-31'] = [];\neq['2-31'].xmin = 1;\neq['2-31'].xmax = 100;\neq['2-31'].args = [-0.0324052, -0.6430061, -0.0307184, 0.0375190];\neq['2-31'].desc = \"Max overpressure (300 ft): scaled range from psi\";\n\n//Eq. 2.37 - maximum overpressure at 400 feet; input is psi; output in scaled range\neq['2-37'] = [];\neq['2-37'].xmin = 1;\neq['2-37'].xmax = 50;\neq['2-37'].args = [-0.0083104, -0.6809590, 0.0443969, 0.0032291];\neq['2-37'].desc = \"Max overpressure (400 ft): scaled range from psi\";\n\n//Eq. 2.43 - maximum overpressure at 500 feet; input is psi; output in scaled range\neq['2-43'] = [];\neq['2-43'].xmin = 1;\neq['2-43'].xmax = 50;\neq['2-43'].args = [0.0158545, -0.7504681, 0.1812493, -0.0573264];\neq['2-43'].desc = \"Max overpressure (500 ft): scaled range from psi\";\n\n//Eq. 2.49 - maximum overpressure at 600 feet; input is psi; output in scaled range\neq['2-49'] = [];\neq['2-49'].xmin = 1;\neq['2-49'].xmax = 30;\neq['2-49'].args = [0.0382755, -0.8763984, -0.4701227, -0.02046373];\neq['2-49'].desc = \"Max overpressure (600 ft): scaled range from psi\";\n\n//Eq. 2.55 - maximum overpressure at 700 feet; input is psi; output in scaled range\neq['2-55'] = [];\neq['2-55'].xmin = 1;\neq['2-55'].xmax = 20;\neq['2-55'].args = [0.0468997, -0.7764501, 0.3312436, -0.1647522];\neq['2-55'].desc = \"Max overpressure (700 ft): scaled range from psi\";\n\n//Eq. 2.61 - maximum overpressure at optimum blast height; input is psi; output in scaled range\neq['2-61'] = [];\neq['2-61'].xmin = 1;\neq['2-61'].xmax = 200;\neq['2-61'].args = [0.1292768, -0.7227471, 0.0147366, 0.0135239];\neq['2-61'].desc = \"Max overpressure (OBH): scaled range from psi\";\n\n//Eq. 2.60 - maximum overpressure at optimum height of burst; input is scaled range; output in psi\neq['2-60'] = [];\neq['2-60'].xmin = 0.0508;\neq['2-60'].xmax = 1.35;\neq['2-60'].args = [0.1829156, -1.4114030, -0.0373825, -0.1635453];\neq['2-60'].desc = \"Max overpressure (OBH): psi from scaled range\";\n\n//Eq. 2.6 - maximum dynamic pressure at 0 feet; input is scaled range; output in psi\neq['2-6'] = [];\neq['2-6'].xmin = 0.0615;\neq['2-6'].xmax = 4.73;\neq['2-6'].args = [-1.9790344, -2.7267144, 0.5250615, -0.1160756];\neq['2-6'].desc = \"Max dynamic pressure (surface): psi from scaled range\";\n\n//Eq. 2.62 - maximum dynamic pressure at optimum height of burst; input is scaled range; output in psi\neq['2-62'] = [];\neq['2-62'].xmin = 0.154;\neq['2-62'].xmax = 1.37;\neq['2-62'].args = [1.2488468, -2.7368746];\neq['2-62'].desc = \"Max dynamic pressure (OBH): psi from scaled range\";\n\n//Eq. 2.64 - maximum dynamic pressure at optimum height of burst; input is scaled range; output in psi\neq['2-64'] = [];\neq['2-64'].xmin = 0.0932;\neq['2-64'].xmax = 0.154;\neq['2-64'].args = [-3.8996912, -6.0108828];\neq['2-64'].desc = \"Max dynamic pressure (OBH): psi from scaled range\";\n\n//Eq. 2.8 - duration of positive overpressure at 0 feet; input is scaled range; output in sec\neq['2-8'] = [];\neq['2-8'].xmin = 0.0677;\neq['2-8'].xmax = 0.740;\neq['2-8'].args = [-0.1739890, 0.5265382, -0.0772505, 0.0654855];\neq['2-8'].desc = \"Duration of positive overpressure (surface): sec from scaled range\";\n\n//Eq. 2.12 - blast wave arrival time at 0 feet; input is scaled range; output in sec\neq['2-12'] = [];\neq['2-12'].xmin = 0.0570;\neq['2-12'].xmax = 1.10;\neq['2-12'].args = [0.6078753, 1.1039021, -0.2836934, 0.1006855];\n\n//Eq. 2.16 - maximum wind velocity at 0 feet; input is scaled range; output in mph\neq['2-16'] = [];\neq['2-16'].xmin = 0.0589;\neq['2-16'].xmax = 4.73;\neq['2-16'].args = [1.3827823, -1.3518147, 0.1841482, 0.0361427];\n\n//Eq. 2.74 - maximum wind velocity at optimum burst height; input is scaled range; output in mph\neq['2-74'] = [];\neq['2-74'].xmin = 0.2568;\neq['2-74'].xmax = 1.4;\neq['2-74'].args = [1.7110032, -1.2000278, 0.8182584, 1.0652528];\n\n//Eq. 2.76 - maximum wind velocity at optimum burst height; input is scaled range; output in mph\neq['2-76'] = [];\neq['2-76'].xmin = 0.0762;\neq['2-76'].xmax = 0.2568;\neq['2-76'].args = [3.8320701, 5.6357427, 6.6091754, 1.5690375];\n\n/* OPTIMUM HEIGHT OF BURST */\n\n//Eq. 2.78 - optimum height of burst for given overpressure; input is maximum overpressure; output is scaled height\neq['2-78'] = [];\neq['2-78'].xmin = 1;\neq['2-78'].xmax = 200;\neq['2-78'].args = [3.2015016, -0.3263444];\n\n//Eq. 2.79 - optimum height of burst to maximize overpressure; input is scaled range; output is scaled height\neq['2-79'] = [];\neq['2-79'].xmin = 0.0512;\neq['2-79'].xmax  = 1.35;\neq['2-79'].args = [3.1356018, 0.3833517, -0.1159125];\n\n/* THERMAL RADIATION */\n\n//Eq. 2.106 - thermal radiation, input is slant range, for airburst, output is Q(1/W); for surface, input is range, output is Q(1/.7W)\neq['2-106'] = [];\neq['2-106'].xmin = 0.05;\neq['2-106'].xmax  = 50;\neq['2-106'].args = [-0.0401874, -2.0823477, -0.0511744, -0.0074958];\n\n//Eq. 2.108 - thermal radiation, input for airburst is Q(1/W); for surface, is Q(1/.7W); output is distance/slant distance\neq['2-108'] = [];\neq['2-108'].xmin = 0.0001;\neq['2-108'].xmax  = 100;\neq['2-108'].args = [-0.0193419, -0.4804553, -0.0055685, 0.0002013];\n\n//Eq. 2.110 - thermal radiation for 1st degree burns; input is yield, output is Q (cal/cm^2)\neq['2-110'] = [];\neq['2-110'].xmin = 1;\neq['2-110'].xmax  = 100000;\neq['2-110'].args = [0.3141555, 0.059904, 0.0007636, -0.0002015];\n\n//Eq. 2.111 - thermal radiation for 2nd degree burns; input is yield, output is Q (cal/cm^2)\neq['2-111'] = [];\neq['2-111'].xmin = 1;\neq['2-111'].xmax  = 100000;\neq['2-111'].args = [0.6025982, 0.0201394, 0.0139640, 0.0008559];\n\n/* Following 5 equations derived from figure 12.65 of Glasstone and Dolan 1977 */\n\n// These are technically only bound between 1kt and 20 MT but the scaling looks fine enough \n//Eq. 77-12.65-1st-50 - thermal radiation for 50% probability of an unshielded population for 1st degree burns\n//input is yield, output is Q (cal/cm^2)\neq['77-12.65-1st-50'] = [];\neq['77-12.65-1st-50'].xmin = 1;\neq['77-12.65-1st-50'].xmax  = 20000;\neq['77-12.65-1st-50'].args = [1.93566176470914, 0.325315457507999, -0.113516274769641, 0.0300971575115961, -0.00330445814836616, 0.000129665656335876];\n\n//Eq. 77-12.65-2nd-50 - thermal radiation for 50% probability of an unshielded population for 2nd degree burns\n//input is yield, output is Q (cal/cm^2)\neq['77-12.65-2nd-50'] = [];\neq['77-12.65-2nd-50'].xmin = 1;\neq['77-12.65-2nd-50'].xmax  = 20000;\neq['77-12.65-2nd-50'].args = [4.0147058823566697E+00, 3.7180525416799937E-01, -4.5026131075683193E-02, 1.3549565337157871E-02, -1.6559848551158524E-03, 7.0380159845451207E-05];\n\n//Eq. 77-12.65-3rd-50 - thermal radiation for 50% probability of an unshielded population for 3rd degree burns\n//input is yield, output is Q (cal/cm^2)\neq['77-12.65-3rd-50'] = [];\neq['77-12.65-3rd-50'].xmin = 1;\neq['77-12.65-3rd-50'].xmax  = 20000;\neq['77-12.65-3rd-50'].args = [5.9981617647112317E+00, 5.3350791551060528E-01, -2.3435878115600033E-02, 1.0395274013807305E-02, -1.4366360115630195E-03, 6.3930657856814399E-05];\n\n//Eq. 77-12.65-noharm-100 - thermal radiation for 100% probability of an unshielded population for no burns\n//input is yield, output is Q (cal/cm^2)\neq['77-12.65-noharm-100'] = [];\neq['77-12.65-noharm-100'].xmin = 1;\neq['77-12.65-noharm-100'].xmax  = 20000;\neq['77-12.65-noharm-100'].args = [1.14705882353066, 0.124659908645308, -0.0160088216223604, 0.00359441786929512, -0.000263841056172493, 0.0000053050769836388];\n\n//Eq. 77-12.65-3rd-100 - thermal radiation for 100% probability of an unshielded population for 3rd degree burns\n//input is yield, output is Q (cal/cm^2)\neq['77-12.65-3rd-100'] = [];\neq['77-12.65-3rd-100'].xmin = 1;\neq['77-12.65-3rd-100'].xmax  = 20000;\neq['77-12.65-3rd-100'].args = [7.0018382352996857, 0.55437306382914320, 0.056501270479506649, -0.015219252753643841, 0.0017062986685328282, -0.000067950215125955893];\n\n\n/* INITIAL NUCLEAR RADIATION */\n\n//Eq. 2.115 - ratio of scaling factor to yield, used for 2.114; input is yield, output is scaling factor\neq['2-115'] = [];\neq['2-115'].xmin = 10;\neq['2-115'].xmax  = 20000;\neq['2-115'].args = [-2.1343121, 5.6948378, -5.7707609, 2.7712520, -0.6206012, 0.0526380];\n\nexport default eq;\n\n\n\n","import SidePanel from './sidepanel';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    function getPosition(){\n        return new Promise((resolve, reject) => {\n            function success(position) {\n                    // for when getting location is a success\n                    const coordinates = {\n                        lat: position.coords.latitude,\n                        long: position.coords.longitude\n                    }\n                    resolve(coordinates);\n            }\n\n            function error(error_message) {\n                        // for when getting location results in an error\n                        reject(console.error('An error has occured while retrieving location', error_message));\n            }  \n\n            if (\"geolocation\" in navigator) {\n                // check if geolocation is supported/enabled on current browser\n                const mapOptions = {\n                    enableHighAccuracy: true\n                };\n                navigator.geolocation.getCurrentPosition(\n                        success,\n                        error,\n                        mapOptions\n                );\n\n            } else {\n            // geolocation is not supported\n            // get your location some other way\n                alert('geolocation is not enabled on this browser')\n            }\n\n        });\n    }\n    window.getPosition = getPosition;\n\n    //  const sidePanel = new SidePanel();\n    //  sidePanel.initPanel();\n\n    getPosition().then((coords) => {\n\n            const latitude = coords.lat;\n            const longitude = coords.long;\n             //Place a script tag at the header containing our map initialization function\n            const head = document.getElementsByTagName('head')[0];\n            const scriptMap = document.createElement('script');\n            scriptMap.type = 'text/javascript';\n            scriptMap.id = 'scriptMap';\n            scriptMap.setAttribute('data-lat', `${latitude}`);\n            scriptMap.setAttribute('data-long', `${longitude}`);\n            head.appendChild(scriptMap);\n\n            function initMap() {\n                const lat = document.getElementById('scriptMap').getAttribute('data-lat');\n                const long = document.getElementById('scriptMap').getAttribute('data-long');\n\n                var currentLocation = { lat: parseFloat(lat) , lng: parseFloat(long) };\n                // debugger\n                var map = new google.maps.Map(\n                    document.getElementById('map'),\n                    { zoom: 11, \n                    center: currentLocation,\n                    mapTypeControl: true,\n                    mapTypeControlOptions: {\n                    style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,\n                    mapTypeIds: ['roadmap', 'terrain', 'satellite']\n                    } });\n                var marker = new google.maps.Marker({\n                    position: currentLocation,\n                    map: map,\n                    draggable: true,\n                    animation: google.maps.Animation.DROP\n                });\n\n\n               \n\n                const drawCircle = (radius, strokeColor, fillColor) => {\n                    let lat = marker.getCurrentPosition().lat();\n                    let lng = marker.getCurrentPosition().long();\n                    center = {lat, lng};\n\n                    new google.maps.Circle({\n                        strokeColor,\n                        strokeOpacity: 0.8,\n                        strokeWeight: 2,\n                        fillColor: fillColor,\n                        fillOpacity: 0.35,\n                        map,\n                        center,\n                        radius\n                    });\n                };\n\n                const sidePanel = new SidePanel();\n                sidePanel.initPanel();\n\n                debugger\n\n                const handleDetonation = () => {\n                    const radii = sidePanel.getRadii();\n                    for (let radius in radii) {\n                        switch(radius){\n                            case fireballRad:\n                                return drawCircle(radii.fireballRad, 'red', 'orange');\n                            case onsetNuclearRadiation500Rem:\n                                return drawCircle(radii.onsetNuclearRadiation500Rem, 'yellow', 'green');\n                            case thermalRadiation3rdDegreeBurns:\n                                return drawCircle(radii.thermalRadiation3rdDegreeBurns, '#f50', 'yellow');\n                            case craterRadius:\n                                return drawCircle(radii.craterRadius, 'black', '#ccc');\n                        }\n                    }\n\n                };\n\n                const detonateButton = document.getElementById('detonate');\n                google.maps.event.addDomListener(detonateButton, 'click', handleDetonation\n                );\n            }\n            \n            scriptMap.innerHTML = initMap;\n\n        //Make an api request to google maps to get the map access and pass the initMap callback inside of the api request body\n            // debugger\n            const body = document.getElementsByTagName('body')[0];\n            const scriptAPI = document.createElement('script');\n            scriptAPI.type = 'text/javascript';\n            scriptAPI.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyD0RuIHcxsFDgZPuy2B3Kg_y7XqXaIfNEY&callback=initMap';\n            body.appendChild(scriptAPI);\n\n            \n    });\n\n    \n \n\n\n    // https://nuclearsecrecy.com/nukemap/\n    // http://nuclearweaponarchive.org/Nwfaq/Nfaq5.html#nfaq5.1\n    // https://hackernoon.com/d3-js-and-google-maps-api-in-10-easy-steps-4f258323525b\n    // https://console.cloud.google.com/google/maps-apis/api-list?project=detonationmap\n    // https://developers.google.com/maps/documentation/javascript/tutorial\n    // https://developers.google.com/maps/documentation/javascript/examples/layer-data-polygon\n\n  \n    \n\n});\n\n// https://www.fourmilab.ch/etexts/www/effects/eonw_3.pdf#zoom=100\n           \n        \n\n   \n//   //test\n//     window.getInfo = function (){\n//         return fetch('https://cors-anywhere.herokuapp.com/https://www.osti.gov/api/v1/records/4706703', {\n//             method: 'GET', // *GET, POST, PUT, DELETE, etc.\n//             // mode: 'cors', // no-cors, cors, *same-origin\n//             // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n//             credentials: 'omit', // include, *same-origin, omit\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 // 'Content-Type': 'application/x-www-form-urlencoded',\n//             },\n//             // redirect: 'follow', // manual, *follow, error\n//             // referrer: 'no-referrer', // no-referrer, *client\n//             // body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n//         })//.then( response => console.log( response.json() ) ); // parses JSON response into native Javascript objects \n//     };\n\n\n","import {bombData} from './data/data'; \nimport Calculator from './calculator';\n\n\nclass SidePanel {\n    constructor(){\n        this.initYield = this.initYield.bind(this);\n        this.whenSelected = this.whenSelected.bind(this);\n        this.onRangeChange = this.onRangeChange.bind(this);\n        this.initYieldRange = this.initYieldRange.bind(this);\n\n        this.airburst = document.getElementById('airburst');\n        this.surface = document.getElementById('surface');\n        this.bombInfo = document.getElementById('bombInfo');\n        this.yieldRangeValue = document.getElementById('range-value');\n        this.yieldRange = document.getElementById('yield');\n        this.yieldSelect = document.getElementById('yieldSelect');\n        this.detonateButton = document.getElementById('detonate');\n\n\n        this.airburstVal = true; \n        this.yield = null;\n    }\n\n    initPanel(){\n        this.initYield();\n        this.initYieldRange();\n    }\n\n    whenSelected(e){\n        e.preventDefault();\n\n        while (this.bombInfo.firstChild){\n            this.bombInfo.removeChild(bombInfo.firstChild);\n        }\n\n        const bombName = e.target.value;\n        const bombObject = bombData[bombName];\n\n        this.yieldRangeValue.innerText = bombObject.yield;\n        this.yieldRange.value = `${parseFloat(bombObject.yield)}`;\n        this.yield = parseFloat(bombObject.yield);\n\n        Object.keys(bombObject).forEach(attr => {\n            let newListItem = document.createElement('li');\n            newListItem.append(bombObject[attr]);\n            this.bombInfo.appendChild(newListItem);\n        });\n        \n    }\n\n    initYield(){\n        const defaultOption = document.createElement('option');\n        defaultOption.text = 'Or choose one that has been tested already.';\n        defaultOption.selected = true;\n        defaultOption.disabled = true;\n        defaultOption.value = null;\n        this.yieldSelect.appendChild(defaultOption);\n        const bombs = Object.keys(bombData);\n\n        bombs.forEach(bomb => {\n            let newOption = document.createElement('option');\n            const bombObject = bombData[bomb];\n            newOption.text = bombObject.origin + ' \\u21D2 ' + bomb + ' \\u21D2 ' + bombObject.yield + ' \\u21D2 ' + bombObject.date;\n            newOption.value = bomb;\n            this.yieldSelect.appendChild(newOption);\n        });\n\n        this.yieldSelect.addEventListener('change', this.whenSelected );\n    }\n\n    onRangeChange(e){\n        const currentValue = e.currentTarget.value;\n        this.yieldRangeValue.innerText = currentValue + \" kt [TNT]\";\n        this.yield = parseFloat(currentValue);\n    }\n\n    initYieldRange(){\n        this.yieldRangeValue.innerText = this.yieldRange.value + \" kt [TNT]\";\n        this.yield = this.yieldRange.value;\n        this.yieldRange.addEventListener('input', this.onRangeChange);\n    }\n\n    getRadii(){\n        this.airburstVal = this.airburst.checked;\n        const calculator = new Calculator();\n        const radii = {};\n\n        radii.fireballRad = calculator._mi2m(calculator.getFireballRadius(this.yield, this.airburstVal));\n        radii.onsetNuclearRadiation500Rem = calculator._mi2m(calculator.getOnsetNuclearRadiationRadius(this.yield, 500));\n        radii.thermalRadiation3rdDegreeBurns = calculator._mi2m(calculator.getThermalRadiationRadius(this.yield, '_3rd-100', this.airburstVal));\n\n        if (!this.airburstVal) {\n            radii.craterRadius = calculator._mi2m(calculator.getCraterParams(this.yield, 'soil').apparentDiam / 2.0);\n        } \n\n        return radii;\n    }\n\n}\n\nexport default SidePanel;"],"sourceRoot":""}